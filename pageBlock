ex)
총 페이지 수(totalPageNum) : 16
현재 페이지 번호(now pageNum) : 14
페이지 당 게시물 개수(# of content of each page) : 5
블럭당 페이지 개수(# of page of each block) : 3


<1/9>
- 총 블럭 개수(totalBlock)
	전체 페이지 수 / 블럭 당 페이지 수
	ex) 	totalPageNum = 16
		# of page of each block = 3
		ceil(totalPage / # of page of each block) = ceil(16 / 3) = 6 (1-3, 4-6, 7-9, 10-12, 13-15, 16)
	따라서 총 블럭의 수는 6개가 된다.	

<2/9>
- 현재 블럭 번호(currentBlockNo)(ex: 1~5페이지 -> 1블럭, 6~10페이지 -> 2블럭)
	현재 페이지 번호 / 블럭 당 페이지 수
	ex)	now pageNum = 14
		# of page of each block = 3
		ceil(now pageNum / # of page of each block) = ceil(14 / 3) = 5 (1-3, 4-6, 7-9, 10-12, 13-15, 16)
	따라서 현재 블럭의 번호는 5번이 된다.

<3/9>
- 블럭 시작 페이지 번호(blockStartNo)
	(현재 블럭 번호 - 1) * 블럭 당 페이지 수 + 1
	ex)	now pageNum = 14
		# of page of each block = 3
		now blockNum = 5 ...why?-> look at -현재 블럭번호-

		(now blockNum - 1) * # of page of each block + 1
		= (5 - 1) * 3 + 1 = 13 ..... (1-3, 4-6, 7-9, 10-12, 13-15, 16)
	따라서 현재 페이지의 블럭 번호(5)의 시작 페이지 번호는 13이 된다.

<4/9>
- 블럭 페이지 끝 번호(blockEndNo)
	현재 블럭 번호 * 블럭 당 페이지 수
	ex) 	totalPageNum = 16
		now pageNum = 16
		# of page of each block = 3
		now blockNum = 6
		blockEndNo = 6 * 3 = 18 --> 그러나 실제로는(맨 위의 예시) 16개의 PAGE밖에 없음
		17, 18 PAGE는 유령 페이지가 되기 때문에 direction 할 때 문제 발생.. 없애줘야 함
		어떻게?
		if(blockEndNo > totalPage){ 	// 계산한 블럭 페이지 끝 번호가 전체 페이지 번호보다 크다면...
			blockEndNo <- totalPage	// 블럭페이지 끝 번호를 전체 페이지 번호에 맞춰준다.
		}
	따라서 현재 페이지의 블럭 번호(6)의 마지막 페이지 번호는 16이 된다.

<5/9><6/9>
- [이전](prevPage) [다음](nextPage) .. 선언시에는 0으로 초기화

	ex) 	now pageNum = 14
		# of page of each block = 3
		now blockNum = 5
	개념 : 	첫 블럭(blockNum : 1)과 마지막 블럭(totalBlock)의 UI는 이전, 또는 다음 버튼이 없거나 비활성화 상태여야 한다.
		활성화 비활성화를 다루기 위해 boolean 자료형 선언(hasPrev, hasNext)
		<이전>
		if(currentBlockNo == 1){	//현재 블럭이 1번 블럭이면
			hasPrev = false	//이전 블럭 가기 불가능
		} else {			//현재 블럭이 1번 블럭이 아니면
			hasPrev = true		//이전 블럭 가기 가능
			prevPage = (currentBlockNo - 1 ) * # of page of each block -> (5 - 1) * 3 = 12
		}따라서 이전 버튼에 prevPage(12)를 담아줘서 클릭하면 12번 페이지로 이동하도록 설정 할 수 있음

		<다음>
		boolean hasNext = true;			//다음 블럭 가기 가능 여부 저장값 초기화.
		if(currentBlockNo < totalBlock ){	//현재 블럭이 마지막 블럭보다 작으면
			hasNext = true			//다음 블럭 가기 가능
			nextPage = currentBlockNo * # of page of each block + 1 -> 5 * 3 + 1 = 16
		} else {				//현재 블럭이 마지막 블럭보다 같거나 크면(큰값이 오면 안되겠지만)
			hasNext = false			//다음 블럭 가기 불가능
		}따라서 다음 버튼에 nextPage(16)를 담아줘서 클릭하면 16번 페이지로 이동하도록 설정 할 수 있음


ex)
now PageNum : 15
prevPage : 12
nextPage : 16
hasPrev : true
hasNext : true
blockStartNo : 13
blockEndNo : 15
<7/9>
(이전/다음)의 (이전) 처리🐿️🐿️🐿️
	//🐿️🐿️🐿️: 이전 블럭 이동이 가능하면 미리 계산한 이전 블록 이동 시 이동 할 페이지번호를 랑크에 전달하기🐿️🐿️🐿️//
	if(hasPrev){	// 이전 버튼이 활성화 되는 경우
		if(searchWord==null){	// <1>일반 리스트
			<a href="list.jsp?page=<%=prevPage%>">이전</a>  // 12번 페이지로 이동하게 된다.
		} else {		// <2>검색어가 있을 경우
			<a href="list.jsp?page=<%=prevPage%>&word=<%=searchWord%>">이전</a>
		}		
	}

<8/9>
블럭 처리
	//🐿️🐿️🐿️현재 블럭의 페이지 시작번호와 끝번호를 이용하여 반복문의 시작값 끝값으로 하고 이 값을 페이지 번호로 출력하기🐿️🐿️🐿️
	//for(int i=1;i<=pageMaxNumber;i++){  			<< 이전 반복문을
	for(int i=blockStartNo;i<=blockEndNo;i++){	// 	<< 이렇게 바꿈 ( i=13;i<=15;i++)
		if(now PageNum == i){	//현재 페이지랑 번호가 같으면 링크 안걸어줌
			<%=i %>		// 15번은 링크가 걸리지 않음.
		} else {			
			if(searchWord==null){	// <1>일반 리스트	
			<a href="list.jsp?page=<%=i %>"><%=i %></a> // 13 14는 링크 걸림
			} else {		// <2>검색어가 있을 경우
				//*중요* 한글 검색어를 전달할 때는 url인코딩을 해줘야함. 영어는 괜찮음. 그래도 다 해주고..
				String urlEncodedSearchWord = java.net.URLEncoder.encode(searchWord);				
				<a href="list.jsp?page=<%=i %>&word=<%=urlEncodedSearchWord%>"><%=i %></a>			
				}			
			}
		}
	
	//🐿️🐿️🐿️{블럭 처리 - 9/9}.(이전/다음)의 (다음) 처리🐿️🐿️🐿️
	//🐿️🐿️🐿️: 다음 블럭 이동이 가능하면 미리 계산한 이전 블록 이동 시 이동 할 페이지번호를 랑크에 전달하기🐿️🐿️🐿️//
	if(hasNext){
		if(searchWord==null){	// <1>일반 리스트
			<a href="list.jsp?page=<%=nextPage%>">다음</a>
		} else {		// <2>검색어가 있을 경우
			<a href="list.jsp?page=<%=nextPage%>&word=<%=searchWord%>">다음</a>
		}			
	}
